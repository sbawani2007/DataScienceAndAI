{"nbformat_minor":1,"cells":[{"source":"import requests\nimport datetime\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\ndef daily_price_historical(symbol, comparison_symbol, all_data=True, limit=1, aggregate=1, exchange=''):\n   # url = 'https://min-api.cryptocompare.com/data/histoday?fsym={}&tsym={}&limit={}&aggregate={}'\\\n    #        .format(symbol.upper(), comparison_symbol.upper(), limit, aggregate)\n    #if exchange:\n     #   url += '&e={}'.format(exchange)\n    #if all_data:\n     #   url += '&allData=true'\n    page = pd.read_csv(\"../input/btc-eth/BTC.csv\")\n    #requests.get(url)\n    data = page#.json()['Data']\n    df = pd.DataFrame(data)\n    df['timestamp'] = [datetime.datetime.fromtimestamp(d) for d in df.time]\n    return df\n\n\ndef load_data():\n    #Get daily price data for January only\n    df = daily_price_historical('BTC','USD')\n    mask = (df['timestamp'] >= '2018-01-01') & (df['timestamp'] <= '2018-01-31')\n    df = df.loc[mask]\n\n    #calculate the return\n    y_train=(df['close']-df['open'])*100/(df['open'])\n\n\n    df = pd.read_csv('../input/crypto-index/index.csv')\n    mask = (df['Date'] >= '2018-01-01') & (df['Date'] <= '2018-01-31')\n    df = df.loc[mask]\n    x_train = (df['Close']-df['Open'])*100/(df['Open'])\n    #print((x_train))\n    #print(y_train)\n    x_train = x_train[0:30]\n    y_train = x_train[0:30]\n    return x_train,y_train\n\n\n\n\ndef model(X, w1,w2):\n    return tf.add(tf.multiply(X, w1),w2)\n\ndef regress_tensorflow(x_train,y_train):\n    learning_rate = 0.000001\n    training_epochs = 1000\n    X = tf.placeholder(tf.float32)\n    Y = tf.placeholder(tf.float32)\n\n\n    w1 = tf.Variable(0.0, name=\"weight1\")\n    w2 = tf.Variable(0.0, name=\"weight2\")\n\n    y_model = model(X, w1,w2)\n\n    cost = tf.square(Y-y_model)\n    train_op = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\n    sess = tf.Session()\n    init = tf.global_variables_initializer()\n    sess.run(init)\n    for epoch in range(training_epochs):\n        for (x, y) in zip(x_train, y_train):\n            sess.run(train_op, feed_dict={X: x, Y: y})\n\n    w_val1 = sess.run(w1)\n    w_val2 = sess.run(w2)\n    print(\"Beta = \",w_val1)\n    sess.close()\n    plt.scatter(x_train, y_train)\n    y_learned = x_train*w_val1+w_val2\n    plt.plot(x_train, y_learned, 'r')\n    plt.show()\n\n\ndef regressStatsModel(x_train,y_train):\n    import statsmodels.api as sm\n    model = sm.OLS(y_train, x_train)\n    results = model.fit()\n    print(results.params)\n\n\ndef regressSKLearn(x_train,y_train):\n    from sklearn import datasets, linear_model\n    from sklearn.metrics import mean_squared_error, r2_score\n\n    regr = linear_model.LinearRegression()\n\n    # Train the model using the training sets\n\n    regr.fit(x_train.reshape(-1,1),y_train.reshape(-1,1))\n    print('Coefficients: \\n', regr.coef_)\n    \n    plt.scatter(x_train, y_train)\n    #y_learned = x_train*w_val1+w_val2\n    #y_learned = regr.predict(x_train.values.reshape(-1,1))\n    #plt.plot(x_train, y_learned, 'r')\n    plt.show()\n\n\n\n#regress_tensorflow(*load_data())\n#regressSKLearn(*load_data())","outputs":[],"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"069cbdff-2ce8-4e9e-810e-1380a0300994","_uuid":"a3bec2774f760344fdcd841110bfb74993ce8a28","collapsed":true,"trusted":true}},{"source":"regressSKLearn(*load_data())","outputs":[],"cell_type":"code","execution_count":null,"metadata":{"trusted":true,"collapsed":true,"_uuid":"d6bee85bee7bf960ee52f6b4714fd2b979a930f0","_cell_guid":"f1591d7d-1e48-4b15-ab20-f792475b18c1"}},{"source":"\n#regressSKLearn(*load_data())","outputs":[],"cell_type":"code","execution_count":null,"metadata":{"trusted":true,"collapsed":true,"_uuid":"3270129552d3358e4dc436aa1bc1ebd074fec307","_cell_guid":"16e4606f-d8ff-44ee-adc0-9839e7228c90"}}],"nbformat":4,"metadata":{"language_info":{"nbconvert_exporter":"python","name":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"version":3,"name":"ipython"},"pygments_lexer":"ipython3","mimetype":"text/x-python"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}}}